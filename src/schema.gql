# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Comment {
  category: CommentCategory!
  content: String!
  createdAt: DateTime!
  dislikes: Float!
  episode: Episode!
  id: Float!
  likes: [Like!]!
  parent: Comment
  replies: [Comment!]
  updatedAt: DateTime!
  user: User!
}

"""댓글의 종류"""
enum CommentCategory {
  Challenge
  Episode
  Saga
}

type CoreOutput {
  error: String
  ok: Boolean!
}

input CreateAccountInput {
  email: String!
  nickname: String!
  password: String!
  userId: String!
}

type CreateAccountOutput {
  error: String
  ok: Boolean!
}

input CreateCommentInput {
  category: CommentCategory!
  content: String!
  episodeId: Float!
  userId: Float!
}

type CreateCommentOutput {
  commentId: Float!
  error: String
  ok: Boolean!
}

input CreateEpisodeInput {
  authorComment: String!
  content: String!
  sagaId: Float!
  title: String!
}

type CreateEpisodeOutput {
  episodeId: Float
  error: String
  ok: Boolean!
}

input CreateSagaInput {
  category: SagaCategory!
  description: String!
  thumbnailUrl: String!
  title: String!
  userId: Float!
}

type CreateSagaOutput {
  error: String
  ok: Boolean!
  sagaId: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteCommentInput {
  commentId: Float!
}

type DeleteCommentOutput {
  error: String
  ok: Boolean!
}

input DeleteEpisodeInput {
  episodeId: Float!
}

type DeleteEpisodeOutput {
  error: String
  ok: Boolean!
}

input DeleteSagaInput {
  sagaId: Float!
}

type DeleteSagaOutput {
  error: String
  ok: Boolean!
}

input EditCommentInput {
  commentId: Float!
  content: String!
}

type EditCommentOutput {
  error: String
  ok: Boolean!
}

input EditEpisodeInput {
  authorComment: String!
  content: String!
  episodeId: Float!
  title: String!
}

type EditEpisodeOutput {
  error: String
  ok: Boolean!
}

input EditProfileInput {
  email: String
  password: String
}

type EditProfileOutput {
  error: String
  ok: Boolean!
}

input EditSagaInput {
  description: String!
  sagaId: Float!
  thumbnailUrl: String!
  title: String!
}

type EditSagaOutput {
  error: String
  ok: Boolean!
}

type Episode {
  authorComment: String!
  comments: [Comment!]!
  content: String!
  createdAt: DateTime!
  id: Float!
  interests: [Interest!]!
  likes: [Like!]!
  saga: Saga!
  title: String!
  updatedAt: DateTime!
  views: Float!
}

input GetCommentListInput {
  category: CommentCategory!
  episodeId: Float
}

type GetCommentListOutput {
  data: [Comment!]
  error: String
  ok: Boolean!
}

input GetEpisodeDetailInput {
  episodeId: Float!
}

type GetEpisodeDetailOutput {
  episode: Episode!
  error: String
  nextEpisode: Episode
  ok: Boolean!
  previousEpisode: Episode
}

input IncreaseEpisodeViewCountInput {
  episodeId: Float!
}

type IncreaseEpisodeViewCountOutput {
  error: String
  ok: Boolean!
}

type Interest {
  createdAt: DateTime!
  episode: Episode
  id: Float!
  interestableId: Float!
  interestableType: InterestableType!
  saga: Saga
  updatedAt: DateTime!
  user: User!
}

input InterestEpisodeInput {
  episodeId: Float!
  userId: Float!
}

type InterestEpisodeOutput {
  error: String
  ok: Boolean!
}

input InterestSagaInput {
  sagaId: Float!
  userId: Float!
}

type InterestSagaOutput {
  error: String
  ok: Boolean!
}

enum InterestableType {
  Episode
  Saga
}

type Like {
  comment: Comment
  createdAt: DateTime!
  episode: Episode
  id: Float!
  likeableId: Float!
  likeableType: LikeableType!
  saga: Saga
  updatedAt: DateTime!
  user: User!
}

input LikeCommentInput {
  commentId: Float!
  userId: Float!
}

type LikeCommentOutput {
  error: String
  ok: Boolean!
}

input LikeEpisodeInput {
  episodeId: Float!
  userId: Float!
}

type LikeEpisodeOutput {
  error: String
  ok: Boolean!
}

input LikeSagaInput {
  sagaId: Float!
  userId: Float!
}

type LikeSagaOutput {
  error: String
  ok: Boolean!
}

enum LikeableType {
  Comment
  Episode
  Saga
}

input LoginInput {
  password: String!
  userId: String!
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  createComment(input: CreateCommentInput!): CreateCommentOutput!
  createEpisode(input: CreateEpisodeInput!): CreateEpisodeOutput!
  createSaga(input: CreateSagaInput!): CreateSagaOutput!
  deleteComment(input: DeleteCommentInput!): DeleteCommentOutput!
  deleteEpisode(input: DeleteEpisodeInput!): DeleteEpisodeOutput!
  deleteSaga(input: DeleteSagaInput!): DeleteSagaOutput!
  editComment(input: EditCommentInput!): EditCommentOutput!
  editEpisode(input: EditEpisodeInput!): EditEpisodeOutput!
  editSaga(input: EditSagaInput!): EditSagaOutput!
  increaseEpisodeViewCount(input: IncreaseEpisodeViewCountInput!): IncreaseEpisodeViewCountOutput!
  login(input: LoginInput!): LoginOutput!
  setCommentLike(input: LikeCommentInput!): LikeCommentOutput!
  setEpisodeInterest(input: InterestEpisodeInput!): InterestEpisodeOutput!
  setEpisodeLike(input: LikeEpisodeInput!): LikeEpisodeOutput!
  setSagaInterest(input: InterestSagaInput!): InterestSagaOutput!
  setSagaLike(input: LikeSagaInput!): LikeSagaOutput!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailOutput!
  verifyPhone(input: VerifyEmailInput!): CoreOutput!
}

type Query {
  editProfile(input: EditProfileInput!): EditProfileOutput!
  getCommentList(input: GetCommentListInput!): GetCommentListOutput!
  getEpisodeDetail(input: GetEpisodeDetailInput!): GetEpisodeDetailOutput!
  getEpisodeList(sagaId: Float!): [Episode!]!
  getSagaList: [Saga!]!
  healthCheck: CoreOutput!
  me: User!
  userProfile(userId: Float!): UserProfileOutput!
}

type Saga {
  author: User!
  category: SagaCategory!
  createdAt: DateTime!
  description: String!
  episodes: [Episode!]!
  id: Float!
  interests: [Interest!]!
  isCompleted: Boolean!
  likes: [Like!]!
  thumbnailUrl: String!
  title: String!
  updatedAt: DateTime!
}

enum SagaCategory {
  Challenge
  Series
}

type User {
  comments: [Comment!]!
  createdAt: DateTime!
  email: String!
  id: Float!
  interests: [Interest!]!
  likes: [Like!]!
  nickname: String!
  password: String!
  point: Float!
  sagas: [Saga!]!
  updatedAt: DateTime!
  userId: String!
  verified: Boolean!
}

type UserProfileOutput {
  error: String
  ok: Boolean!
  user: User
}

input VerifyEmailInput {
  code: String!
}

type VerifyEmailOutput {
  error: String
  ok: Boolean!
}